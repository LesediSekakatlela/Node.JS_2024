/* Test in terminal Listing 17.4 and 17.5*/

const mongoose = require("mongoose"),
Subscriber = require("./models/subscriber");
mongoose.connect(
"mongodb://localhost:27017/recipe_db",
{useNewUrlParser: true}
);
mongoose.Promise = global.Promise;

Subscriber.create({
  name: "Jon",
  email: "jon@jonwexler.com",
  zipCode: "12345"
  })
  .then(subscriber => console.log(subscriber))
  .catch(error => console.log(error.message));
  var subscriber;
  Subscriber.findOne({
  name: "Jon"
  }).then(result => {
  subscriber = result;
  console.log(subscriber.getInfo());
  });

Subscriber.create({
  name: "Paul",
  email: "Paul@jonwexler.com",
  zipCode: "121"
  })
  .then(subscriber => console.log(subscriber))
  .catch(error => console.log(error.message));
  var subscriber;
  Subscriber.findOne({
  name: "Paul"
  }).then(result => {
  subscriber = result;
  console.log(subscriber.getInfo());
  });
  
 
/* Test in terminal Listing 17.7*/

const mongoose = require("mongoose"),
Course = require("./models/course"),
Subscriber = require("./models/subscriber");
mongoose.connect(
"mongodb://localhost:27017/recipe_db",
{useNewUrlParser: true}
);
mongoose.Promise = global.Promise;
 
var testCourse, testSubscriber;
Course.create( {
title: "Tomato Land",
description: "Locally farmed tomatoes only",
zipCode: 12345,
items: ["cherry", "heirloom"]
}).then(course => testCourse = course);
Subscriber.findOne({}).then(
subscriber => testSubscriber = subscriber
);
testSubscriber.courses.push(testCourse._id);
testSubscriber.save();
Subscriber.populate(testSubscriber, "courses").then(subscriber =>
console.log(subscriber)
);

 /* Test in terminal Listing 17.9 is the full code do not run 17.7 will throw errors*/
const mongoose = require("mongoose"),
Subscriber = require("./models/subscriber"),
Course = require("./models/course");
var testCourse,
testSubscriber;
mongoose.connect(
"mongodb://localhost:27017/recipe_db",
{useNewUrlParser: true}
);
mongoose.Promise = global.Promise;
Subscriber.remove({})
.then((items) => console.log(`Removed ${items.n} records!`))
.then(() => {
return Course.remove({});
})
.then((items) => console.log(`Removed ${items.n} records!`))
.then(() => {
return Subscriber.create( {
name: "Jon",
email: "jon@jonwexler.com",
zipCode: "12345"
});
})
.then(subscriber => {
console.log(`Created Subscriber: ${subscriber.getInfo()}`);
})
.then(() => {
return Subscriber.findOne( {
name: "Jon"
});
})
.then(subscriber => {
testSubscriber = subscriber;
console.log(`Found one subscriber: ${subscriber.getInfo()}`);
})
.then(() => {
return Course.create({
title: "Tomato Land",
description: "Locally farmed tomatoes only",
zipCode: 12345,
items: ["cherry", "heirloom"]
});
})
.then(course => {
testCourse = course;
console.log(`Created course: ${course.title}`);
})
.then(() => {
testSubscriber.courses.push(testCourse);
testSubscriber.save();
})
.then( () => {
return Subscriber.populate(testSubscriber, "courses");
})
.then(subscriber => console.log(subscriber))
.then(() => {
return Subscriber.find({ courses: mongoose.Types.ObjectId(testCourse._id) });
})
.then(subscriber => console.log(subscriber));
 
 
 /*18.3  and 18.5*/

const mongoose = require("mongoose"),
  User = require("./models/user"),
  Subscriber = require("./models/subscriber");
  mongoose.connect("mongodb://localhost:27017/recipe_db", {
  useNewUrlParser: true
});
mongoose.Promise = global.Promise;

User.create({
    name: {
      first: "Dave",
      last: "Wexler"
    },
    email: "dave@gmail.com",
    password: "pass123"
  })
  .then(user => {
    testUser = user;
    console.log("User created:", user);
  })
  .catch(error => console.log(error.message)); 


var targetSubscriber;

Subscriber.findOne({
    email: testUser.email
  })
  .then(subscriber => {
    targetSubscriber = subscriber;
    console.log("Target subscriber found:", targetSubscriber);
  })
  .catch(error => console.log(error.message));
 
 
 /*Listing 18.6*/
 
const mongoose = require("mongoose"),
User = require("./models/user"),
Subscriber = require("./models/subscriber");
mongoose.connect(
"mongodb://localhost:27017/recipe_db",
{useNewUrlParser: true}
);
mongoose.Promise = global.Promise;

Subscriber.create({
  name: "Savvas",
  email: "savvas@gmail.com",
  zipCode: "12345"
  })
  .then(subscriber => console.log(subscriber))
  .catch(error => console.log(error.message));
  var subscriber;
  Subscriber.findOne({
  name: "Savvas"
  }).then(result => {
  subscriber = result;
  console.log(subscriber.getInfo());
  });
 
var testUser;
User.create({
name: {
first: "Jon1",
last: "Wexler "
},
email: "savvas@jonwexler.com",
password: "pass123"
})
.then(user => {
testUser = user;
return Subscriber.findOne({
email: user.email
});
})
.then(subscriber => {
testUser.subscribedAccount = subscriber;
testUser.save().then(user => console.log("user updated"));
})
.catch(error => console.log(error.message));

/*19.4*/

const mongoose = require("mongoose"),
Subscriber = require("./models/subscriber");
mongoose.connect(
"mongodb://localhost:27017/recipe_db",
{useNewUrlParser: true}
);
mongoose.Promise = global.Promise;

Subscriber.create({
  name: "Flower",
  email: "flower@gmail.com",
  zipCode: "12345"
  })
  .then(subscriber => console.log(subscriber))
  .catch(error => console.log(error.message));
  var subscriber;
  Subscriber.findOne({
  name: "Flower"
  }).then(result => {
  subscriber = result;
  console.log(subscriber.getInfo());
  });

userSchema.pre("save", function (next) {
let user = this;
if (user.subscribedAccount === undefined) {
Subscriber.findOne({
email: user.email
})
.then(subscriber => {
user.subscribedAccount = subscriber;
next();
})
.catch(error => {
console.log(`Error in connecting subscriber:${error.message}`);
next(error);
});
} else {
next();
}
});